upstream discourse {
  server unix:///usr/share/nginx/discourse/tmp/sockets/thin.0.sock;
  server unix:///usr/share/nginx/discourse/tmp/sockets/thin.1.sock;
  server unix:///usr/share/nginx/discourse/tmp/sockets/thin.2.sock;
  server unix:///usr/share/nginx/discourse/tmp/sockets/thin.3.sock;
}

server {
    listen 80;
    server_name labs.bootstrap.je;

    sendfile on;

    keepalive_timeout 65;

    root /home/admin/discourse/public;

    location / {

        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  Host $http_host;

        # If it's a POST, send to RAILS...
        if ($request_method = POST) {
            add_header bananas "1";
            proxy_pass http://discourse;
            break;
        }

        # Not sure if this is ever used?
        location ~ ^/t\/[0-9]+\/[0-9]+\/avatar {
            expires 1d;
            add_header Cache-Control public;
            add_header ETag "";
        }

        # Serve assets statically
        location ~ ^/assets/ {
            expires 1y;
            add_header Cache-Control public;
            add_header ETag "";
            add_header grape "5";
            break;
        }

        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  Host $http_host;

        add_header pears "2";
        # If the file exists as a static file serve it directly without
        # running all the other rewrite tests on it otherwise proxy.
        try_files $request_filename @proxy;
    }

    # Serve previously uploaded file content statically
    # Pass new uploads to proxy
    location ~ /uploads {
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  Host $http_host;

        if ($request_method = POST) {
            add_header cherry "4";

            proxy_pass http://discourse;
            break;
        }

        expires 1d;
        add_header Cache-Control public;
        add_header ETag "";
        add_header oranges "3";
        break;
    }

    location @proxy {
        proxy_pass http://discourse;
    }
}
